<!DOCTYPE html>
<html lang="en">
	<!-- 관리자 스케줄 달력 -->
	<head>
		<title>유한대학교 학생상담센터</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<script src="/js/jquery-latest.min.js"></script>
		<script src="/js/tui-code-snippet.min.js"></script>
		<script src="/js/tui-time-picker.js"></script>
		<script src="/js/tui-date-picker.js"></script>
		<script src="/js/tui-calendar.js"></script>
		<link rel="stylesheet" href="/css/tui-time-picker.css">
		<link rel="stylesheet" href="/css/tui-date-picker.css">
		<link rel="stylesheet" href="/css/tui-calendar.css">
		<link rel="stylesheet" href="/css/coreui.min.css">
		<link rel="stylesheet" href="https://unpkg.com/@coreui/icons@2.0.0-beta.3/css/all.min.css">
		<style>
			.tui-timepicker-column:nth-of-type(1){
				display:block!important;
			}
			.tui-full-calendar-dropdown-menu-item:nth-of-type(3){
				display: none;
			}
			.tui-full-calendar-dropdown-menu-item:nth-of-type(4){
				display: none;
			}
			.tui-timepicker{
				padding:30px 20px!important;
			}
			.pr_10{
				padding-right:10px;
			}
			.pr_30{
				padding-right:30px;
			}
		</style>
	</head>
	<body class="c-app">
		<div class="c-sidebar c-sidebar-dark c-sidebar-fixed c-sidebar-lg-show" id="sidebar">
			<%- include ('adminNav'); -%>
			<button class="c-sidebar-minimizer c-class-toggler" type="button" data-target="_parent"
				data-class="c-sidebar-minimized"></button>
		</div>
		<div class="c-wrapper c-fixed-components">
			<header class="c-header c-header-light c-header-fixed c-header-with-subheader">
				<button class="c-header-toggler c-class-toggler d-lg-none mfe-auto" type="button" data-target="#sidebar"
					data-class="c-sidebar-show">
					<i class="cil-hamburger-menu"></i>
				</button><a class="c-header-brand d-lg-none" href="#">
					<i class="cil-hamburger-menu"></i></a>
				<button class="c-header-toggler c-class-toggler mfs-3 d-md-down-none" type="button" data-target="#sidebar"
					data-class="c-sidebar-lg-show" responsive="true">
					<i class="cil-hamburger-menu"></i>
				</button>
				<ul class="c-header-nav ml-auto mr-4">
				<%- include ('adminAccount'); -%>
				</ul>
				<div class="c-subheader px-3">
					<ol class="breadcrumb border-0 m-0">
						<li class="breadcrumb-item">예약</li>
						<li class="breadcrumb-item active">스케줄</li>
					</ol>
				</div>
			</header>
			<div class="c-body">
				<main class="c-main">
					<div class="container-fluid">
						<div class="fade-in">
							<div class="date-view" style="display:inline-block">
								<h2 id='date'></h2>
							</div>
							<div class="ctrlBtns" style="display:inline-block; float:right;">
								<button id="nowBtn" class="btn btn-outline-primary">Today</button>
								<button id="prevBtn" class="btn btn-outline-primary"><i class="cil-chevron-left"></i></button>
								<button id="nextBtn" class="btn btn-outline-primary"><i class="cil-chevron-right"></i></button>
							</div>
							<div id="calendar" style="height: 800px;"></div>
						</div>
					</div>
				</main>
				<footer class="c-footer">
					<div><a href="https://coreui.io">CoreUI</a> &copy; 2020 creativeLabs.</div>
					<div class="ml-auto">Powered by&nbsp;<a href="https://coreui.io/">CoreUI</a></div>
				</footer>
			</div>
		</div>
		<script src="/js/coreui.bundle.min.js"></script>
		<script>
			<%if(adminInfo.author===1){%>
			const options = {
				defaultView: 'month',
				useCreationPopup: true,
				useDetailPopup: true,
			}
			<%}else {%>
			const options = {
				defaultView: 'month',
				useCreationPopup: true,
				useDetailPopup: true,
				isReadOnly : true
			}
			<%} %>
		
			const container = document.getElementById('calendar');
			
			var Calendar = tui.Calendar;

			const calendar = new Calendar(container, options);
			const nowBtn = document.getElementById('nowBtn');
			const prevBtn = document.getElementById('prevBtn');
			const nextBtn = document.getElementById('nextBtn');
			const dayViewBtn = document.getElementById('dayViewBtn');
			const weekViewBtn = document.getElementById('weekViewBtn');
			const monthViewBtn = document.getElementById('monthViewBtn');
			const date = document.getElementById('date');

			date.textContent = `${calendar.getDate().getFullYear()}-${calendar.getDate().getMonth() + 1}`;

			calendar.setCalendars([
				{
					id: 'Reservation',
					name: '예약',
					color: '#ffffff',
					bgColor: '#0cb700',
					dragBgColor: '#0cb700',
					borderColor: '#0cb700'
				},
				{
					id: 'Meeting',
					name: '회의',
					color: '#ffffff',
					bgColor: '#0080d6',
					dragBgColor: '#0080d6',
					borderColor: '#0080d6'
				},
				{
					id: 'Reserved',
					name: '상담',
					color: '#ffffff',
					bgColor: '#ff008c',
					dragBgColor: '#ff008c',
					borderColor: '#ff008c'
					
				}
				,
				{
					id: 'Finished',
					name: '종료',
					color: '#000000',
					bgColor: '#707070',
					dragBgColor: '#707070',
					borderColor: '#707070'
					
				}
			]); //캘린더 종류 등록

			// 캘린더 내용 DB에서 읽어서 캘린터에 설정	
			$.ajax({
				type : "POST",
				dataType : "json",
				url : "./readMySchedule",
				async : true,
				data : {},
				success : function(data){
					let mySchedules = [];

					data.schedules.forEach((row) => {
						delete row.empid;
						row.id = row.scheduleno;

						mySchedules.push(row);
					});
					calendar.createSchedules(mySchedules);
				}
			});

			$.ajax({
				type: "POST",
				datatype : "json",
				url : "./readReservedSchedule",
				async : true,
				data : {},
				success : function(data){
					let reservedSchedules = [];

					data.reserved.forEach((row, index) => {
						delete row.empid;
						delete row.scheduleno;
						row.category = 'time';
						reservedSchedules.push(row);
					});

					calendar.createSchedules(reservedSchedules);
				}
			});
			
			calendar.on('beforeCreateSchedule', scheduleData => {
				const schedule = { // 해당 객체의 형태로 db를 구성해야 할 것 같음
					calendarId: scheduleData.calendarId,

					title: scheduleData.title,

					start: scheduleData.start,
					end: scheduleData.end,
					category: scheduleData.isAllDay ? 'allday' : 'time',
					location: scheduleData.location,            
				};

				let sendAjax = {

					calendarId : schedule.calendarId,
					title : schedule.title,
					start : schedule.start._date.toString(),
					end : schedule.end._date.toString(),
					category : schedule.category,
					location : schedule.location
				};

				if(schedule.calendarId == "Reserved" || schedule.calendarId == "Finished"){
					alert("예약 관련 스케줄은 추가할 수 없습니다.");
					return;
				}

				$.ajax({
					type: "POST",
					dataType: "json",
					url: "./createSchedule",
					async: true,
					data: { "sendAjax" : JSON.stringify(sendAjax) },
					success: function (data) { 	
						if(data.state === "ok"){
							alert("스케줄 추가가 완료되었습니다.");
							calendar.createSchedules([schedule]);
							window.location.reload();
						}else if(data.state === "diff"){
							alert("예약 가능한 일정 추가는 날짜가 같아야 합니다.");
						}else if(data.state === "duplicate"){
							alert("중복되는 스케줄이 존재합니다.");
						}else if(data.state === "inputerrtime"){
							alert("스케줄 시간을 잘못 입력하셨습니다.");
						}
					}
				});

			});
			
			calendar.on('beforeUpdateSchedule', event => {
				const { schedule, changes } = event;

				if(schedule.calendarId == "Reserved" || schedule.calendarId == "Finished"){
					alert("예약 관련 스케줄은 수정할 수 없습니다.");
					return;
				}

				if(changes.hasOwnProperty("start") && changes.hasOwnProperty("end")){
					if((changes.end._date.getDate() != changes.start._date.getDate()) || (changes.end._date.getMonth() != changes.start._date.getMonth())){
					   alert("날짜를 다르게 수정할 수 없습니다.");
					   return;
					}
				}

				if(changes.hasOwnProperty("start")){
					if((schedule.end._date.getDate() != changes.start._date.getDate()) || (schedule.end._date.getMonth() != changes.start._date.getMonth())){
					   alert("날짜를 다르게 수정할 수 없습니다.");
					   return;
					}
				}

				if(changes.hasOwnProperty("end")){
					if((schedule.start._date.getDate() != changes.end._date.getDate()) || (schedule.start._date.getMonth() != changes.end._date.getMonth())){
						alert("날짜를 다르게 수정할 수 없습니다.");
						return;
					}
				}

				let sendAjax = {
					id : schedule.id,
					changes : changes,
					schedule : schedule
				}

				if('state' in changes){
					delete changes['state'];
				}
				let changeCnt = Object.keys(changes).length;

				if(changeCnt > 0){
					$.ajax({
						type : "POST",
						dataType : "json",
						url : "./updateSchedule",
						async : true,
						data : {"sendAjax" : JSON.stringify(sendAjax)},
						success : function(data){
							if(data.state === "ok"){
								alert("스케줄 수정이 완료되었습니다.");
								calendar.updateSchedule(schedule.id, schedule.calendarId, changes);
							}
							else if(data.state === "deny"){
								alert("이미 예약이 있어 수정할 수 없습니다.");
							}
						}
					});
				}
				else{
					alert("스케줄 변경 사항이 없습니다.");
					return;
				}
			});

			calendar.on('beforeDeleteSchedule', scheduleData => {
				const { schedule } = scheduleData;

				if(schedule.calendarId == "Reserved" || schedule.calendarId == "Finished"){
					alert("예약 관련 스케줄은 삭제할 수 없습니다.");
					return;
				}

				let sendAjax = {
					id : schedule.id
				}

				$.ajax({
					type : "POST",
					dataType : "json",
					url : "./deleteSchedule",
					async : true,
					data : {"sendAjax" : JSON.stringify(sendAjax)},
					success : function(data){
						if(data.state === "deny"){
							alert("이미 예약이 있어 삭제할 수 없습니다.");
						}
						else if(data.state === "ok"){
							alert("스케줄 삭제가 완료되었습니다.");
							calendar.deleteSchedule(schedule.id, schedule.calendarId);
						}
					}
				});
			});

			nowBtn.addEventListener('click', () => {
				calendar.today();
				date.textContent = `${calendar.getDate().getFullYear()}-${calendar.getDate().getMonth() + 1}`;
			});

			prevBtn.addEventListener('click', () => {
				calendar.prev();
				date.textContent = `${calendar.getDate().getFullYear()}-${calendar.getDate().getMonth() + 1}`;
			});

			nextBtn.addEventListener('click', () => {
				calendar.next();
				date.textContent = `${calendar.getDate().getFullYear()}-${calendar.getDate().getMonth() + 1}`;
			});
		</script>	
	</body>
</html>
